apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: cngp-service
  labels:
    type: database
spec:
  writeConnectionSecretsToNamespace: default
  compositeTypeRef:
    apiVersion: crossplane.io/v1alpha1
    kind: App
  patchSets:
    - name: metadata
      patches:
        - fromFieldPath: metadata.labels
          type: FromCompositeFieldPath
  resources:
    - name: kubernetes
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: ProviderConfig
        spec:
          credentials:
            source: InjectedIdentity
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubernetes"
                type: Format
          type: FromCompositeFieldPath
      readinessChecks:
        - type: None
    - name: helm
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: ProviderConfig
        spec:
          credentials:
            source: InjectedIdentity
      patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-helm"
                type: Format
          type: FromCompositeFieldPath
      readinessChecks:
        - type: None
    - name: namespace
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          managementPolicies: ["Observe", "Create", "Update"]
          forProvider:
            manifest:
              apiVersion: v1
              kind: Namespace
      patches:
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.manifest.metadata.name
        - fromFieldPath: "metadata.annotations"
          toFieldPath: spec.forProvider.manifest.metadata.annotations
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.labels.app
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubernetes"
      readinessChecks:
        - type: MatchString
          fieldPath: status.atProvider.manifest.status.phase
          matchString: "Active"
    - name: cnpg
      base:
        apiVersion: helm.crossplane.io/v1beta1
        kind: Release
        metadata:
          annotations:
            crossplane.io/external-name: cloudnative-pg
        spec:
          forProvider:
            chart:
              name: cloudnative-pg
              repository: https://cloudnative-pg.github.io/charts
              version: 0.20.1
            namespace: cnpg-system
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-helm"
    - name: instance
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: postgresql.cnpg.io/v1
              kind: Cluster
              metadata:
                annotations: {}                  
              spec:
                instances: 1
                storage:
                  size: 1Gi
          writeConnectionSecretToRef:
            namespace: demo
            name: cnpg-demo-secret
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster"
        - fromFieldPath: "metadata.annotations"
          toFieldPath: spec.forProvider.manifest.metadata.annotations
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubernetes"
      readinessChecks:
        - type: MatchCondition
          matchCondition:
            type: Ready
            status: 'True'
    - name: deployment
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: apps/v1
              kind: Deployment
              metadata:
                annotations: {}                                
              spec:
                template:
                  spec:
                    containers:
                      - env:
                          - name: CONNECTIONS
                            value: "db"
                          - name: LABEL_db
                            value: ""
                          - name: SERVER_db
                            value: "postgres"
                          - name: URL_db
                            valueFrom:
                              secretKeyRef:
                                name: secret-db
                                key: uri
                          - name: ENGINE_db
                            value: "postgres@dbgate-plugin-postgres"
                        name: dbgate
                        image: dbgate/dbgate:latest
                        ports:
                          - containerPort: 3000
                        livenessProbe:
                          httpGet:
                            path: /
                            port: 3000
                        readinessProbe:
                          httpGet:
                            path: /
                            port: 3000
                        resources:
                          limits:
                            cpu: 250m
                            memory: 256Mi
                          requests:
                            cpu: 125m
                            memory: 128Mi
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-dbgate"
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[1].value
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.template.spec.containers[0].env[3].valueFrom.secretKeyRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-cluster-app"
        - fromFieldPath: "metadata.annotations"
          toFieldPath: spec.forProvider.manifest.metadata.annotations
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.labels.app
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.selector.matchLabels.app
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.template.metadata.labels.app
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubernetes"
      readinessChecks:
        - type: None
    - name: service
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object
        spec:
          forProvider:
            manifest:
              apiVersion: v1
              kind: Service
              metadata:
                annotations: {}                                
              spec:
                type: ClusterIP
                ports:
                  - port: 3000
                    targetPort: 3000
                    protocol: TCP
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-dbgate-service"
        - fromFieldPath: "metadata.annotations"
          toFieldPath: spec.forProvider.manifest.metadata.annotations
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.labels.app
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.selector.app
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubernetes"
      readinessChecks:
        - type: None
    - name: ingress
      base:
        apiVersion: kubernetes.crossplane.io/v1alpha1
        kind: Object        
        spec:
          template:
            metadata:              
          forProvider:
            manifest:
              apiVersion: networking.k8s.io/v1
              kind: Ingress              
              metadata:
                annotations: {}                  
              spec:
                ingressClassName: nginx
                rules:
                  - host: change_me
                    http:
                      paths:
                        - backend:
                            service:
                              name: change_me
                              port:
                                number: 3000
                          path: /
                          pathType: Prefix
      patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.name
          transforms:
            - type: string
              string:
                fmt: "%s-ingress"
        - fromFieldPath: "metadata.annotations"
          toFieldPath: spec.forProvider.manifest.metadata.annotations
        - fromFieldPath: spec.parameters.namespace
          toFieldPath: spec.forProvider.manifest.metadata.namespace
        - fromFieldPath: spec.parameters.host
          toFieldPath: spec.forProvider.manifest.spec.rules[0].host
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.rules[0].http.paths[0].backend.service.name
          transforms:
            - type: string
              string:
                fmt: "%s-dbgate-service"
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.labels.app
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.spec.selector.app
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
          transforms:
            - type: string
              string:
                fmt: "%s-kubernetes"
        - type: ToCompositeFieldPath
          fromFieldPath: spec.forProvider.manifest.spec.rules[0].host
          toFieldPath: status.host
      readinessChecks:
        - type: None
